service: slowcovid
app: slowcovid
org: jeffreysilver

custom:
  datadog:
    forwarder: ${ssm:/stopcovid/${self:provider.stage}/datadogForwarderArn}
  enterprise:
    collectLambdaLogs: false
  pythonRequirements:
    usePoetry: false
    usePipenv: false
    slim: true
    slimPatterns:
      - __tests__/**
      - .github/**
      - db_local/**
      - env/***
      - node_modules/**

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - kinesis:*
        - sqs:*
        - dynamodb:*
        - rds-data:*
        - secretsmanager:GetSecretValue
        - s3:GetObject
        - s3:GetObjectVersion
      Resource: "*"

  environment:
    STAGE: ${self:provider.stage}
    DEPLOY_STAGE: ${ssm:/stopcovid/${self:provider.stage}/deployStage}
    TWILIO_MESSAGING_SERVICE_SID: ${ssm:/stopcovid/${self:provider.stage}/twilioMessagingServiceSID~true}
    TWILIO_ACCOUNT_SID: ${ssm:/stopcovid/${self:provider.stage}/twilioAccountSID~true}
    TWILIO_AUTH_TOKEN: ${ssm:/stopcovid/${self:provider.stage}/twilioAuthToken~true}
    DB_CLUSTER_ARN: ${ssm:/stopcovid/${self:provider.stage}/dbClusterArn}
    DB_SECRET_ARN: ${ssm:/stopcovid/${self:provider.stage}/dbSecretArn}
    DRILL_CONTENT_S3_BUCKET: ${ssm:/stopcovid/${self:provider.stage}/drillContentS3Bucket}
    ROLLBAR_TOKEN: ${ssm:/stopcovid/${self:provider.stage}/rollbarToken}


plugins:
  - serverless-python-requirements
  - serverless-plugin-datadog

functions:
  twilioWebhook:
    handler: stopcovid/sms/aws_lambdas/twilio_webhook.handler
    timeout: 20
    provisionedConcurrency: 5
    events:
      - http:
          path: webhooks/twilio
          method: post

  sendMessage:
    handler: stopcovid/sms/aws_lambdas/send_sms_batch.handler
    timeout: 60
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - OutboundSMSFifoQueue
              - Arn

  log_inbound_sms:
    handler: stopcovid/sms/aws_lambdas/log_inbound_sms.handler
    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt:
              - CommandStream
              - Arn
          startingPosition: LATEST
          maximumRetryAttempts: 5
          bisectBatchOnFunctionError: true
          destinations:
            onFailure:
              arn:
                Fn::GetAtt:
                  - MessageLogFailureQueue
                  - Arn
              type: sqs

  handleCommand:
    handler: stopcovid/dialog/aws_lambdas/handle_command.handler
    provisionedConcurrency: 3
    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt:
              - CommandStream
              - Arn
          startingPosition: LATEST
          maximumRetryAttempts: 5
          bisectBatchOnFunctionError: true
          destinations:
            onFailure:
              arn:
                Fn::GetAtt:
                  - CommandFailureQueue
                  - Arn
              type: sqs
    environment:
      DIALOG_TABLE_NAME_SUFFIX: ${self:provider.stage}
      REGISTRATION_VALIDATION_URL: ${ssm:/stopcovid/${self:provider.stage}/registrationValidationUrl}
      REGISTRATION_VALIDATION_KEY: ${ssm:/stopcovid/${self:provider.stage}/registrationValidationKey~true}

  distributeDialogEvents:
    handler: stopcovid/sms/aws_lambdas/enqueue_sms_batch.handler
    provisionedConcurrency: 3
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - DialogEventBatches
              - StreamArn
          startingPosition: LATEST
          maximumRetryAttempts: 5
          destinations:
            onFailure:
              arn:
                Fn::GetAtt:
                  - DistributeDialogEventFailureQueue
                  - Arn
              type: sqs

  publishDialogEventBatches:
    handler: stopcovid/dialog/aws_lambdas/publish_dialog_event_batches.handler
    timeout: 60
    provisionedConcurrency: 3
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - DialogEventBatches
              - StreamArn
          startingPosition: LATEST
          maximumRetryAttempts: 5
          destinations:
            onFailure:
              arn:
                Fn::GetAtt:
                  - PublishDialogEventBatchesFailureQueue
                  - Arn
              type: sqs

resources:
  Resources:
    AWSLambdaVPCAccessExecutionRole:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        Description: Creating policy for vpc and lambda.
        Roles:
          - { "Ref": "IamRoleLambdaExecution" }
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource: "*"

    # COMMAND STREAM
    CommandStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: command-stream-${self:provider.stage}
        ShardCount: 4

    # MESSAGE LOG STREAM
    MessageLogStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: message-log-${self:provider.stage}
        ShardCount: 2

    # DIALOG EVENT BATCHES STREAM
    DialogEventBatchesStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: dialog-event-batches-${self:provider.stage}
        ShardCount: 4


    # OUTBOUND SMS
    OutboundSMSFifoQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: outbound-sms-${self:provider.stage}.fifo
        FifoQueue: true
        VisibilityTimeout: 60
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
            - OutboundSMSDeadLetterFifoQueue
            - Arn
          maxReceiveCount: 3

    OutboundSMSDeadLetterFifoQueue:
      Type: AWS::SQS::Queue
      Properties:
        FifoQueue: true
        QueueName: outbound-sms-dlq-${self:provider.stage}.fifo

    # SYSTEM TEST
    SystemTestQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: system-test-${self:provider.stage}
        MessageRetentionPeriod: 60

    # DIALOG STATE AND EVENTS (DynamoDB)
    DialogState:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: dialog-state-${self:provider.stage}
        KeySchema:
          - AttributeName: phone_number
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: phone_number
            AttributeType: S
        BillingMode: PAY_PER_REQUEST

    DialogEventBatches:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: dialog-event-batches-${self:provider.stage}
        KeySchema:
          - AttributeName: phone_number
            KeyType: HASH
          - AttributeName: batch_id
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: phone_number
            AttributeType: S
          - AttributeName: batch_id
            AttributeType: S
          - AttributeName: created_time
            AttributeType: S
        LocalSecondaryIndexes:
          - IndexName: by_created_time
            KeySchema:
              - AttributeName: phone_number
                KeyType: HASH
              - AttributeName: created_time
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        BillingMode: PAY_PER_REQUEST

    # GENERAL IDEMPOTENCY
    IdempotencyChecks:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: idempotency-checks-${self:provider.stage}
        KeySchema:
          - AttributeName: idempotency_key
            KeyType: HASH
          - AttributeName: realm
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: idempotency_key
            AttributeType: S
          - AttributeName: realm
            AttributeType: S
        TimeToLiveSpecification:
          AttributeName: expiration_ts
          Enabled: true
        BillingMode: PAY_PER_REQUEST

    # DRILL SCHEDULING
    DrillTriggerSchedule:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: drill-trigger-schedule-${self:provider.stage}
        KeySchema:
          - AttributeName: phone_number
            KeyType: HASH
          - AttributeName: idempotency_key
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: phone_number
            AttributeType: S
          - AttributeName: idempotency_key
            AttributeType: S
        StreamSpecification:
          StreamViewType: OLD_IMAGE
        TimeToLiveSpecification:
          AttributeName: trigger_ts
          Enabled: true
        BillingMode: PAY_PER_REQUEST

    # Command failures
    CommandFailureQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: command-failures-${self:provider.stage}

     # Message Log failures
    MessageLogFailureQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: message-log-failures-${self:provider.stage}

    # Distribute Dialog Event failures
    DistributeDialogEventFailureQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: distribute-dialog-events-failures-${self:provider.stage}

    PublishDialogEventBatchesFailureQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: publish-dialog-events-batches-failures-${self:provider.stage}
